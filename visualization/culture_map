#!/usr/bin/env ruby

require "RMagick"
require_relative "../lib/paradox"
require_relative "image_generation"
require_relative "game_map"

class Province
  attr_reader :node
  def initialize(node)
    @node = node
  end

  def name
    node["name"]
  end

  def owner
    node["owner"]
  end

  def culture
    @node["culture"]
  end

  def religion
    @node["religion"]
  end
end

class CultureMap < ParadoxGame
  include ImageGeneration
  include GameMap

  def initialize(save_game, *roots)
    super(*roots)
    @data = ParadoxModFile.new(path: save_game).parse!
  end

  def date
    @date ||= @data["date"]
  end

  def provinces
    @provinces ||= @data["provinces"].to_h
  end

  def random_color
    # Very bad way to do so
    [rand(256), rand(256), rand(256)]
  end

  def culture_colors(v)
    @culture_colors ||= {}
    @culture_colors[v] ||= random_color
  end

  def culture_by_province
    @culture_by_province ||= land_province_ids.map{|id|
      province = Province.new(provinces[-id])
      [id, province.culture]
    }.to_h
  end

  def call
    province_map = culture_by_province.map{|k,v| [k, culture_colors(v)] }.to_h
    generate_map_image(build_color_map(province_map)).write("culture-#{date}.png")
  end
end

CultureMap.new(*ARGV).call
